var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === "object") || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, "default", { value: mod, enumerable: true })
      : target,
    mod
  )
);
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// .tarat/drivers/uploader.js
var uploader_exports = {};
__export(uploader_exports, {
  default: () => uploader,
});
module.exports = __toCommonJS(uploader_exports);
var import_signal_model = require("@polymita/signal-model");
var fs = __toESM(require("node:fs"));
var path = __toESM(require("node:path"));

// models/indexes.json
var indexes_default = {
  uploaderItem: "uploaderItem",
};

// .tarat/drivers/uploader.js
var __defProp2 = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) =>
  key in obj
    ? __defProp2(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value,
      })
    : (obj[key] = value);
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp2.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
function uploader() {
  const inputFile = (0, import_signal_model.state)();
  const OSSLink = (0, import_signal_model.computedInServer)(function* () {
    const file = inputFile();
    if (file) {
      const publicDir = path.join(process.cwd(), "public");
      const destFile = path.join(publicDir, file.originalFilename);
      if (!fs.existsSync(publicDir)) {
        fs.mkdirSync(publicDir);
      }
      yield new Promise((resolve) => {
        fs.createReadStream(file.filepath)
          .pipe(fs.createWriteStream(destFile))
          .on("close", () => resolve(0))
          .on("error", () => {
            throw new Error("copy file to public dir fail");
          });
      });
      return {
        name: file.newFilename,
        link: `/${file.originalFilename}`,
      };
    }
  });
  const fileStorage = (0, import_signal_model.prisma)(
    indexes_default.uploaderItem,
    () => void 0,
    {
      immediate: false,
    }
  );
  const writeFileStroage = (0, import_signal_model.writePrisma)(
    fileStorage,
    () => {
      if (OSSLink()) {
        return OSSLink();
      }
    }
  );
  const createStorage = (0, import_signal_model.inputComputeInServer)(
    function* () {
      yield writeFileStroage.create();
    }
  );
  const updateStorage = (0, import_signal_model.inputComputeInServer)(
    function* (targetId) {
      const d = OSSLink();
      if (d) {
        yield writeFileStroage.update(targetId, __spreadValues({}, d));
      }
    }
  );
  return {
    writeFileStroage,
    updateStorage,
    createStorage,
    inputFile,
    OSSLink,
  };
}
var autoParser1689336953054_0 = {
  uploader: {
    names: [
      [0, "inputFile"],
      [1, "OSSLink"],
      [2, "fileStorage"],
      [3, "writeFileStroage"],
      [4, "createStorage"],
      [5, "updateStorage"],
    ],
    deps: [
      ["h", 1, [0]],
      ["ic", 3, [1], [2]],
      ["ic", 4, [], [3]],
      ["ic", 5, [1], [3]],
    ],
  },
};
Object.assign(uploader, {
  __deps__: autoParser1689336953054_0.uploader.deps,
  __names__: autoParser1689336953054_0.uploader.names,
  __name__: "uploader",
  __namespace__: "tarat-file-uploader",
});

/**. auto generated by tarat */
// location at:/Users/zhouyunge/Documents/fishpond-desktop-workspace/packages/polymita-runtime/packages/example/file-uploader/.tarat/server/drivers/cjs/uploader.js
const autoParser1689336962915_3 = {
  uploader: {
    names: [
      [0, "inputFile"],
      [1, "OSSLink"],
      [2, "fileStorage"],
      [3, "writeFileStroage"],
      [4, "createStorage"],
      [5, "updateStorage"],
    ],
    deps: [
      ["h", 1, [0]],
      ["ic", 3, [1], [2]],
      ["ic", 4, [], [3]],
      ["ic", 5, [1], [3]],
    ],
  },
};
Object.assign(uploader, {
  __deps__: autoParser1689336962915_3.uploader.deps,
  __names__: autoParser1689336962915_3.uploader.names,
  __name__: "uploader",
  __namespace__: "tarat-file-uploader",
});
/** auto generated by tarat .*/
