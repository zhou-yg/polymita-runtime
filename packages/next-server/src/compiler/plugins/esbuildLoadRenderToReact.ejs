import { ConnectProvider } from '@polymita/next-connect'
import { h } from '@polymita/renderer'

function RenderToReact<P>(
  module: SingleFileModule<P, any, any, any>,
  modulesLinkMap: Map<string, any>,
  modulesActiveLink: string[],
) {
  registerModule(module, modulesLinkMap)

  const renderer = <%= hasImportSignal ? 'createRSRenderer' : 'createRHRenderer' %>(module, {
    framework: {
      name: 'react',
      lib: React
    },
    moduleOverride: {
      modulesLinkMap,
      modulesActiveMap: modulesActiveLink,
    },
  })
  return (p: P) => {
    const r = renderer.construct(p);
    renderer.provide(
      h(ConnectProvider, {
        pkgName: "<%= pkgName %>",
      })
    )
    return renderer.render()
  }
}

export type <%= name %>Props = ComponentModule.<%= name %>Props

export const base = ComponentModule.base
export const meta = ComponentModule.meta
//
export const name = ComponentModule.name
export const namespace = ComponentModule.namespace
//
export const logic = ComponentModule.logic
export type <%= name %>Layout = ComponentModule.<%= name %>Layout
export const layout = ComponentModule.layout
export const styleRules = ComponentModule.styleRules
export const designPattern = ComponentModule.designPattern

export default (modulesLinkMap: Map<string, any>, modulesActiveLink: string[]) => {
  
  const Component = RenderToReact(ComponentModule, modulesLinkMap, modulesActiveLink);

  const <%= name %> = (props: ComponentModule.<%= name %>Props) => {

    return React.createElement(Component, props)
  }

  return <%= name %>;
}