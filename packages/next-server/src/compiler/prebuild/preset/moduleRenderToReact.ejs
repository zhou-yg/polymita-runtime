import React from 'react'
import { h, createRHRenderer, SingleFileModule, registerModule } from '@polymita/renderer'
import { ConnectProvider } from '@polymita/next-connect'

function RenderToReact<P extends Record<string, any>>(
  module: SingleFileModule<P, any, any, any>,
  modulesLinkMap: Map<string, any>,
  modulesActiveLink: string[],
) {
  registerModule(module, modulesLinkMap)

  const renderer = createRHRenderer(module, {
    framework: {
      name: 'react',
      lib: React
    },
    moduleOverride: {
      modulesLinkMap,
      modulesActiveMap: modulesActiveLink,
    },
  })
  return (p: P) => {
    return renderer.provide(
      h(
        ConnectProvider, 
        {
          pkgName: "<%= pkgName %>",
        },
        h()
      ),
      () => {
        const r = renderer.construct(p);
        return renderer.render()
      },
    )
  }
}

<% names.forEach(CptName => { %>
const forward<%= CptName %> = (modulesLinkMap: Map<string, any>, modulesActiveLink: string[]) => {
  const Component = RenderToReact(<%= CptName %> as any, modulesLinkMap, modulesActiveLink);
  const inner<%= CptName %> = (props: <%= CptName %>.<%= CptName %>Props) => {
    return React.createElement(Component, props)
  }
  return inner<%= CptName %>;
}
<% }) %>

<% overrides.forEach(CptName => { %>
const forward<%= CptName %> = (modulesLinkMap: Map<string, any>) => {
  registerModule(<%= CptName %> as any, modulesLinkMap);
}
<% }) %>

export const views = {
  <% names.forEach(CptName => { %>
  <%= CptName %>: forward<%= CptName %>, <% }) %>

  <% overrides.forEach(CptName => { %>
  <%= CptName %>: forward<%= CptName %>, <% }) %>

}